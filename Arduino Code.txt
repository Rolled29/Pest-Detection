Harvin Aranza
#include <Wire.h> 
#include <Servo.h>          //standard library for the servo
#include <NewPing.h>        //for the Ultrasonic sensor function library.

//FOR GYROSCOPE
const int MPU = 0x68;                                            // MPU6050 I2C address
float AccX, AccY, AccZ;                                          //linear acceleration
float GyroX, GyroY, GyroZ;                                       //angular velocity
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;  //used in void loop()
float roll, pitch, yaw;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float elapsedTime, currentTime, previousTime;
int c = 0;
float new_angle;
float angle;     
//END GYROSCOPE


bool left = false; //KEEP RIGHT
const int in1 = 13; //LEFT
const int in2 = 12; //LEFT
const int in3 = 11; //RIGHT
const int in4 = 10; //RIGHT
const int ena = 9; //LEFT SPEED
const int enb = 8; //RIGHT SPEED


int right_avg;
int left_avg;
int front_avg;
int leftspeed;
int rightspeed;
int forwardspeed = 180;
int low = 0; 
int high = 180;


unsigned long startTime = millis();
unsigned long obstacleTime = millis();



#define trig_left  5  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define echo_left  4  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define trig_right 3
#define echo_right 2
#define trig_front 53
#define echo_front 52
#define MAX_DISTANCE 9999999 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar_left(trig_left, echo_left, MAX_DISTANCE); 
NewPing sonar_right(trig_right, echo_right, MAX_DISTANCE); 
NewPing sonar_front(trig_front, echo_front, MAX_DISTANCE); 

//GYRO FUNCTIONS START

void calculateError() {
  //When this function is called, ensure the car is stationary. See Step 2 for more info

  // Read accelerometer values 200 times
  c = 0;
  while (c < 200) {
    readAcceleration();
    // Sum all readings
    AccErrorX += (atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / PI);
    AccErrorY += (atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / PI);
    c++;
  }
  //Divide the sum by 200 to get the error value, since expected value of reading is zero
  AccErrorX = AccErrorX / 200;
  AccErrorY = AccErrorY / 200;
  c = 0;

  // Read gyro values 200 times
  while (c < 200) {
    readGyro();
    // Sum all readings
    GyroErrorX += GyroX;
    GyroErrorY += GyroY;
    GyroErrorZ += GyroZ;
    c++;
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
  GyroErrorY = GyroErrorY / 200;
  GyroErrorZ = GyroErrorZ / 200;
  Serial.println("The the gryoscope setting in MPU6050 has been calibrated");
}

void readAcceleration() {
  Wire.beginTransmission(MPU);
  Wire.write(0x3B);  // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true);  // Read 6 registers total, each axis value is stored in 2 registers
  //For a range of +-2g, we need to divide the raw values by 16384, according to the MPU6050 datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0;  // X-axis value
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0;  // Y-axis value
  AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0;  // Z-axis value
}

void readGyro() {
  Wire.beginTransmission(MPU);
  Wire.write(0x43);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true);
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
}

void resetGyro(){
  read_angle();
  new_angle = new_angle + angle;  
}
void straight(){
    if(angle >= -1 && angle <= 1 ){
      forward(forwardspeed, forwardspeed);            
    }
    else if (angle < -1){
      forward(low, high);
    }
    else if (angle > 1){
      forward(high,low);
    }
    Serial.println("STRAIGHT");
}

float read_angle (){
  readAcceleration();

  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - AccErrorX;  //AccErrorX is calculated in the calculateError() function
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) - AccErrorY;

  // === Read gyroscope (on the MPU6050) data === //
  previousTime = currentTime;
  currentTime = micros();
  elapsedTime = (currentTime - previousTime) / 1000000;  // Divide by 1000 to get seconds
  readGyro();
  // Correct the outputs with the calculated error values
  GyroX -= GyroErrorX;  //GyroErrorX is calculated in the calculateError() function
  GyroY -= GyroErrorY;
  GyroZ -= GyroErrorZ;
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  gyroAngleX += GyroX * elapsedTime;  // deg/s * s = deg
  gyroAngleY += GyroY * elapsedTime;
  yaw += GyroZ * elapsedTime;
  //combine accelerometer- and gyro-estimated angle values. 0.96 and 0.04 values are determined through trial and error by other people
  roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
  pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
  angle = roll;  //if you mounted MPU6050 in a different orientation to me, angle may not = roll. It can roll, pitch, yaw or minus version of the three
  //for me, turning right reduces angle. Turning left increases angle.
  angle = angle - new_angle;

  static int count;
  static int countStraight;
  
  if (count < 20) {
    count++;
  } else {  //runs once after void loop() runs 7 times. void loop runs about every 2.8ms, so this else condition runs every 19.6ms or 50 times/second
    //Serial.println(angle);
    //Serial.print("Left:" );
    //Serial.println(leftSpeedVal);
    //Serial.print("Right:" );
    //Serial.println(rightSpeedVal);
    count = 0;
  }  

  return angle;
}


//GYRO FUNCTIONS END


void turn(int target){
    read_angle();
    new_angle = new_angle + angle;
    if(target < -50){  // TURN RIGHT
      while (angle >= target ){
        turn_right();
        read_angle();
        Serial.println(angle);
      }
      stop();
      read_angle();
    }
    else if(target > 50){ //TURN LEFT
      while (angle <= target ){
        turn_left();    
        read_angle();
        Serial.println(angle);
      }
      stop();
      read_angle();
    }
  new_angle = new_angle + angle;
     
}
int read_left(){
  delay(20);
  int distance = sonar_left.ping(); // Send ping, get ping time in microseconds (uS).
  distance = sonar_left.convert_cm(distance);
  if (distance == 0){
      distance = 50;
  }
  return distance;
  
}
int read_right(){
  delay(20);
  int distance = sonar_right.ping();
  distance = sonar_right.convert_cm(distance);
  if (distance == 0){
      distance = 50;
  }
  return distance;
}
int read_front(){
  delay(20);
  int distance = sonar_front.ping();
  distance = sonar_right.convert_cm(distance);
  if (distance == 0){
      distance = 50;
  }
  return distance;  
}
void backward(){
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  analogWrite(ena, 80);
  
  digitalWrite(in3,HIGH);
  digitalWrite(in4,LOW);
  analogWrite(enb, 80);
  //Serial.println("Backward");

}
void backward_left(){
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  analogWrite(ena, 150);
  
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
  analogWrite(enb, 0);
  //Serial.println("Backward Left");

}
void backward_right(){
  
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  analogWrite(ena, 0);
  
  digitalWrite(in3,HIGH);
  digitalWrite(in4,LOW);
  analogWrite(enb, 150);
  //Serial.println("Backward Right");

}

void turn_left(){
  
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  analogWrite(ena, 150);
  
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  analogWrite(enb, 150);
  //Serial.println("Backward Right");

}
void turn_right(){
  
  digitalWrite(in1, LOW);   
  digitalWrite(in2, HIGH);
  analogWrite(ena, 150);
  
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  analogWrite(enb, 150);
  //Serial.println("Backward Right");

}

void forward(int motor_left, int motor_right){
      digitalWrite(in1,LOW);         //LEFT
      digitalWrite(in2,HIGH);        //LEFT
      analogWrite(ena, motor_left);  //LEFT
      digitalWrite(in3,LOW);
      digitalWrite(in4,HIGH);
      analogWrite(enb, motor_right);
      //Serial.println("gege");
  
}
void turn_back_right(int target){
  read_angle();
  new_angle = new_angle + angle;
  while (angle > target ){
  turn_right();
  read_angle();
  Serial.println(angle);
  }
  stop();
  read_angle();
  new_angle = new_angle + angle;
  delay(2000);
}
void turn_back_left(int target){
  read_angle();
  new_angle = new_angle + angle;
  while (angle < target ){
  turn_left();
  read_angle();
  Serial.println(angle);
  }
  stop();
  read_angle();
  new_angle = new_angle + angle;
  delay(2000);
}



void move(){
  //leftspeed = 100;
  //rightspeed = 100;
  
    if (read_left() - read_right() <= 2  && read_left() - read_right() >= 0){
    forward(leftspeed, rightspeed);
    leftspeed = forwardspeed;
    rightspeed = forwardspeed;
  } 
  else if (read_right() - read_left() > 0 ){ //RIGHT HIGHER
    if (read_right() > 50){
        if(read_front() < 20){
           stop();
           turn(-70);                    
        } 
        else{
          if (read_left() > 20){
              forward(leftspeed, rightspeed);
              leftspeed = low;
              rightspeed = high;       
              Serial.println("WHUT");      
          }
          else if (read_left() < 20){
              forward(leftspeed, rightspeed);
              leftspeed = high;
              rightspeed = low;
              Serial.println("WHUTx");
          }
          else if (read_left() >= 15 && read_left() <= 20){
            forward(leftspeed, rightspeed);
            leftspeed = forwardspeed;
            rightspeed = forwardspeed;
            Serial.println("WHUTy");
          }
        }
    }
    
    else{
      forward(leftspeed, rightspeed);
      leftspeed = high;
      rightspeed = low;
      Serial.println("Balancing");
    }
    
  }
  else if (read_right() - read_left() < 0 ){ //LEFT HIGHER
    if (read_left() > 70){
      forward(leftspeed, rightspeed);
      leftspeed =  70;
      rightspeed = 150; 
      //Serial.println("Turn Left");     
    }

    
    else{
    forward(leftspeed, rightspeed);
    leftspeed = low;
    rightspeed = high;
    Serial.println("Balancing");
    }
  }

}

void keep_left(){
  Serial.println("KEEP LEFT");
  if(read_left() < 25){
    forward(leftspeed, rightspeed);
    leftspeed =high;
    rightspeed = low;
  }
  else if(read_left() > 25){
    forward(leftspeed, rightspeed);
    leftspeed = low;
    rightspeed = high;
  }
  else if (read_left() >= 25 && read_left() <= 27)  {
    forward(leftspeed, rightspeed);
    leftspeed =forwardspeed;
    rightspeed = forwardspeed;
  }
  }

void keep_right(){
  Serial.println("KEEP RIGHT");
  if(read_right() < 25){
    forward(leftspeed, rightspeed);
    leftspeed =low;
    rightspeed = high;
  }
  else if(read_right() > 25){
    forward(leftspeed, rightspeed);
    leftspeed = high;
    rightspeed = low;
  }
  else if (read_right() >= 25 && read_right() <= 27)  {
    forward(leftspeed, rightspeed);
    leftspeed =forwardspeed;
    rightspeed = forwardspeed;
  }
  }


void stop(){
      leftspeed = 0;
      rightspeed = 0;
      //forwardspeed = 0;
      digitalWrite(in1,LOW);
      digitalWrite(in2,LOW);
      digitalWrite(in3,LOW);
      digitalWrite(in4,LOW);
      Serial.println("STOP");

  
}

void setup() {

  Wire.begin();                 // Initialize comunication
  Wire.beginTransmission(MPU);  // Start communication with MPU6050 // MPU=0x68
  Wire.write(0x6B);             // Talk to the register 6B
  Wire.write(0x00);             // Make reset - place a 0 into the 6B register
  Wire.endTransmission(true);   //end the transmission
  // Call this function if you need to get the IMU error values for your module
  calculateError();
  currentTime = micros();
  Serial.begin(9600); // Starts the serial communication

  //pinMode(right_trigPin, OUTPUT); // Sets the trigPin as an Output
  //pinMode(right_echoPin, INPUT); // Sets the echoPin as an Input
  //pinMode(left_trigPin, OUTPUT); // Sets the trigPin as an Output
  //pinMode(left_echoPin, INPUT); // Sets the echoPin as an Input
  //pinMode(front_trigPin, OUTPUT); // Sets the trigPin as an Output
  //pinMode(front_echoPin, INPUT); // Sets the echoPin as an Input

  pinMode(ena, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enb, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);  
}


String data;
//const String data = "Start";
int start = false;
bool servo_turn = true;
bool obstacle = false;

void loop() {
  //IF START RUNNNING
  int diff = read_right() - read_left();
if (Serial.available() > 0) {
    data = Serial.readStringUntil('!');
    if (data == "Start"){
      data = "Start"; 
    }
    else if (data == "Stop"){
      data = "Stop";
    }
    //else if (data == "Rotate"){
    //  Serial.println("Done");
    //}
}

if (data == "Start"){
  if(start == false){
    delay(0); //WAITS FOR CAMERA TO OPEN BEFORE MOVING
    start = true;
  }


startTime = millis();
while (millis() - startTime <= 500){  
  if (read_front() > 15){
    if (left == true){
        keep_left();
      }
    else if (left == false){
      keep_right();
    }
  }
  else{
    stop();  
    obstacleTime = millis();
    while (millis() - obstacleTime <= 5000){  
      if (read_front() > 15){

        obstacle = false;
        break;     
           
      }      
      else{
        obstacle = true;    
      }
    }
    if(obstacle == true){
    delay(2000);
    if(left == false){
      Serial.println("TURN BACK");
      turn_back_left(170);
      stop();
      left = true;
      
    }
    else{
      Serial.println("TURN BACK");
      turn_back_right(-170);
      stop();
      left = false;
    }
    }
    else{

    }

  }
  }
  

stop();
delay(400);
}


else if (data == "Stop"){
  stop();
  start = false;
}

//servobottom.write(0);
//servotop.write(0);


}